name: CI

on:
  push:
    branches: 
      - ops/test 
  pull_request:
    branches:
      - develop
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential python3

      - name: Install dependencies with legacy peers
        run: |
          npm uninstall tailwindcss --legacy-peer-deps && \
          rm -rf node_modules package-lock.json && \
          npm install --legacy-peer-deps

      - name: Build app
        run: npm run build

      - name: Start app in background
        run: npm start &

      - name: Wait for app to be ready
        run: npx wait-on http://localhost:3000

      #- name: Run Cypress tests
        #continue-on-error: true
        #uses: cypress-io/github-action@v6
        #with:
          # Disable auto-installation (we already ran `npm ci`)
          # install: false
          #install-command: npm install --legacy-peer-deps
          # No need for `build`/`start` since we did it manually
          #command: npx cypress run | awk '/\(Run Finished\)/{flag=1} flag' | tee /tmp/TestResult.txt
          # command: npx cypress run | grep -A 9999 "(Run Finished)" | tee /tmp/TestResult.txt
      # - name: Calculate Pass Percentage
      #- name: Store test results
      #  id: results
      #  if: always()
      #  run: |
            # Install jq for JSON parsing (if not already available)
            #sudo apt-get install -y jq

            # Parse the JSON report
            #TOTAL_TESTS=$(jq '.stats.tests' cypress/results/mochawesome.json)
            #PASSED_TESTS=$(jq '.stats.passes' cypress/results/mochawesome.json)
            
            # Avoid division by zero
            #if [ "$TOTAL_TESTS" -eq 0 ]; then
            #    PERCENTAGE=0
            #else
            #    PERCENTAGE=$(echo "scale=2; ($PASSED_TESTS / $TOTAL_TESTS) * 100" | bc)
            #fi

            # Output the result for use in the next step
            #echo "PERCENTAGE=${PERCENTAGE}%" >> $GITHUB_ENV
            #echo "TestResult=${PERCENTAGE}" >> $GITHUB_ENV
      - name: Run Cypress tests
        id: cypress-tests
        continue-on-error: true
        run: |
          touch /tmp/output.txt
          npx cypress run | awk '/\(Run Finished\)/{flag=1} flag' | tee /tmp/TestResult.txt
          echo "CYPRESS_EXIT_CODE=$?" >> $GITHUB_ENV
      - name: Comment Test Results on PR
        if: always() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        env:
          CYPRESS_RESULT: ${{ env.CYPRESS_EXIT_CODE }}
        with:
          script: |
            const fs = require('fs');
            const { CYPRESS_RESULT } = process.env;
            
            let testOutput = 'No test results found';
            try {
              testOutput = fs.readFileSync('/tmp/TestResult.txt', 'utf8');
            } catch (error) {
              console.error('Error reading test results:', error);
            }

            const statusEmoji = CYPRESS_RESULT === '0' ? '✅' : '❌';
            const message = `${statusEmoji} **Cypress Test Results**\n\n` +
              `\`\`\`\n${testOutput}\n\`\`\`\n` +
              `[View Full Report](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})`;

            // Delete previous comments
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComments = comments.filter(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.includes('Cypress Test Results')
            );

            // Delete all existing bot comments
            await Promise.all(
              botComments.map(comment => 
                github.rest.issues.deleteComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: comment.id,
                })
              )
            );

            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: message
            });