name: CD

on:
  # push:
  #   branches:
  #     - ops/PR-validation 
  pull_request:
    branches:
      - develop
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review

# Add permissions block
permissions:
  pull-requests: write
  issues: write
  contents: read
  packages: write

jobs:
  cd:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Log in to ghcr.io
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.PAT }}

    - name: Build Docker image
      id: docker_build
      continue-on-error: true
      run: |
        #docker compose build
        # Capture the build output in a variable
        touch /tmp/output.txt
        ERROR_OUTPUT=$(docker compose build 2>&1 | tee /tmp/output.txt)
        BUILD_EXIT_CODE=$?
        cat /tmp/output.txt
        #echo "$ERROR_OUTPUT"
        
        # Store the error output for later use
        echo "error_output<<EOF" >> $GITHUB_ENV
        echo "$ERROR_OUTPUT" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        
        # Store the build status
        echo "build_exit_code=$BUILD_EXIT_CODE" >> $GITHUB_ENV
        # Exit with the original build exit code
        exit $BUILD_EXIT_CODE

    - name: Push Docker image
      if: success() && steps.docker_build.outcome == 'success'
      run: docker compose push

    - name: Handle Build Failure
      if: ${{ steps.docker_build.outcome == 'failure' && github.event_name == 'pull_request' }}
      uses: actions/github-script@v6
      with:
        script: |
          const { owner, repo, number } = context.issue;
          
          const errorLog = process.env.error_output || 'Docker build or push failed';
          
          let errorMessage = '‚ùå Build failed!\n\n';
          
          errorMessage += `Error details:\n\`\`\`\n${errorLog}\n\`\`\``;
          
          // Add comment to PR
          await github.rest.issues.createComment({
            owner,
            repo,
            issue_number: number,
            body: errorMessage
          });
          
          // Close PR
          await github.rest.pulls.update({
            owner,
            repo,
            pull_number: number,
            state: 'closed'
          });

    # Continue with remaining steps only if build was successful
    - name: Copy configuration files
      if: steps.docker_build.outcome == 'success'
      uses: appleboy/scp-action@v0.1.0
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        password: ${{ secrets.SERVER_PASSWORD }}
        source: "docker-compose.yml"
        target: "/root/front"
    
    - name: Deploy
      if: steps.docker_build.outcome == 'success'
      uses: appleboy/ssh-action@v0.1.8
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        password: ${{ secrets.SERVER_PASSWORD }}
        script: |
          cd /root/front

          docker logout ghcr.io
          docker login ghcr.io -u ${{ secrets.USERNAME }} -p ${{ secrets.PAT }}

          docker compose pull
          docker compose down --remove-orphans
          docker compose up -d
          docker image prune -f
